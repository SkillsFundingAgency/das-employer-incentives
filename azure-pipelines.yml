parameters:
- name: PublishBranchOfNugetPackage
  type: boolean
  default: false

trigger:
  batch: true
  branches:
    include:
      - "master"

variables:
- name: SolutionBaseName
  value: 'SFA.DAS.EmployerIncentives'
- name: BuildPlatform
  value : 'any cpu'
- name: BuildConfiguration
  value: 'release'
- group: 'BUILD Management Resources'

resources:
  repositories:
  - repository: self
  - repository: das-platform-building-blocks
    type: github
    name: SkillsFundingAgency/das-platform-building-blocks
    ref: refs/tags/0.4.63
    endpoint: SkillsFundingAgency
  containers:
    - container: builder
      image: ubuntu:18.04

stages:
- stage: BuildAndTest
  displayName: 'Build and Test'
  jobs:
  - job: 'BuildDacpac'
    pool:
      name: 'DAS - Continuous Integration'
      demands:
      - Agent.OS -equals Windows_NT
      workspace:
      clean: all
    steps:
    - task: UseGitVersion@5
      inputs:
        versionSpec: 5.x
        useConfigFile: true
        configFilePath: GitVersion.yml

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: 'src/$(SolutionBaseName).Database/$(SolutionBaseName).Database.sqlproj'
        noCache: true

    - task: VSBuild@1
      displayName: 'Build DACPAC'
      inputs:
        solution: 'src/$(SolutionBaseName).Database/$(SolutionBaseName).Database.sqlproj'
        platform: 'anycpu'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '/p:PackageLocation="$(build.artifactstagingdirectory)/publish"'

    - task: CopyFiles@2
      displayName: 'Copy dacpac to: $(build.artifactstagingdirectory)'
      inputs:
        Contents: |
          src\**\*.dacpac
        TargetFolder: '$(build.artifactstagingdirectory)/publish'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: dacpac'
      inputs:
        targetPath: $(build.artifactstagingdirectory)/publish
        artifactName: dacpac

  - job: 'BuildAndTest'
    dependsOn: BuildDacpac
    pool:
      name: 'DAS - Continuous Integration Agents'
    workspace:
      clean: all
    steps:
    - task: UseGitVersion@5
      inputs:
        versionSpec: 5.x
        useConfigFile: true
        configFilePath: GitVersion.yml

    #- task: SonarCloudPrepare@1
    #  displayName: Prepare SonarCloud analysis configuration
    #  condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')))
    #  inputs:
    #    SonarCloud: ESFA - SonarCloud
    #    organization: $(SonarCloudOrganisationKey)
    #    scannerMode: MSBuild
    #    projectName: "$(Build.DefinitionName)"
    #    projectKey: SkillsFundingAgency_das-employer-incentives
    #    extraProperties: sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/CoverageResults/coverage.opencover.xml

    #- task: DotNetCoreCLI@2
    #  displayName: Restore
    #  inputs:
    #    command: restore
    #    projects: 'src/**/*.csproj'
    #    noCache: true

    #- task: DotNetCoreCLI@2
    #  displayName: Build UnitTests
    #  inputs:
    #    command: 'build'
    #    projects: |
    #      src/**/*.UnitTests.csproj
    #    arguments: '--configuration $(buildConfiguration) --no-restore'

    #- task: DotNetCoreCLI@2
    #  displayName: UnitTest
    #  inputs:
    #    command: test
    #    projects: |
    #      src/**/*.UnitTests.csproj
    #    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

    #- task: DockerInstaller@0
    #  displayName: Docker Installer
    #  inputs:
    #    dockerVersion: '20.10.9'
    #    releaseType: stable

    #- task: CmdLine@2
    #  displayName: Test command
    #  inputs:
    #    script: 'sudo groupadd docker'

        
    #- task: CmdLine@2
    #  displayName: Test command
    #  inputs:
    #    script: 'sudo gpasswd -a $USER docker'    

    #- task: CmdLine@2
    #  displayName: Test command
    #  inputs:
    #    script: 'newgrp docker'    
        
    #- task: CmdLine@2
    #  displayName: Start Docker
    #  inputs:
    #    script: 'sudo service /azp/agent/_work/_tool/docker-stable/20.10.9/x64/docker start'

    #- task: CmdLine@2
    #  displayName: Start Docker
    #  inputs:
    #    script: 'sudo service docker restart'

    #- task: Docker@2
    #  inputs:
    #    command: start
    #    container: builder

    - task: DotNetCoreCLI@2
      displayName: Build Acceptance Tests
      inputs:
        command: 'build'
        projects: |
          src/**/*.AcceptanceTests.csproj
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DownloadPipelineArtifact@2
      displayName: 'Download Artifact: dacpac'
      inputs:
        artifactName: dacpac
        targetPath: $(Build.SourcesDirectory)

    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: 'stephekdockertest'
        dockerfile: 'src/**/Dockerfile'
        containerRegistry: '4c4928e1-1b5d-44df-8663-61f102ed1259'

    - task: DotNetCoreCLI@2
      displayName: Run Acceptance Tests
      inputs:
        command: test
        projects: |
          src/**/*.AcceptanceTests.csproj
          !src/**/*.PaymentsProcess.AcceptanceTests.csproj
        arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutput=$(Agent.TempDirectory)/CoverageResults/ /p:MergeWith=$(Agent.TempDirectory)/CoverageResults/coverage.json /p:CoverletOutputFormat="opencover%2cjson"'

    - task: DotNetCoreCLI@2
      displayName: Build $(SolutionBaseName).Messages
      inputs:
        command: 'build'
        projects: src/$(SolutionBaseName).Messages/$(SolutionBaseName).Messages.csproj
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: SonarCloudAnalyze@1
      displayName: Run SonarCloud analysis
      condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')))

    - task: SonarCloudPublish@1
      displayName: Publish SonarCloud analysis results on build summary
      condition: and(succeeded(), or(in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest')))
      inputs:
        pollingTimeoutSec: '300'

    - task: PowerShell@2
      displayName: 'Set NuGet Package Version'
      inputs:
        targetType: inline
        script: |
          if ("$(GitVersion.PreReleaseLabel)" -ne "") { $NuGetPackageVersion = "$(GitVersion.SemVer)-prerelease" } else { $NuGetPackageVersion = "$(GitVersion.SemVer)" }
          Write-Host "NuGetPackageVersion: $NuGetPackageVersion"
          Write-Host "##vso[task.setvariable variable=NuGetPackageVersion]$NuGetPackageVersion"

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        packagesToPack: 'src/$(SolutionBaseName).Messages/$(SolutionBaseName).Messages.csproj'
        versioningScheme: byEnvVar
        versionEnvVar: NuGetPackageVersion
        packDirectory: $(build.artifactstagingdirectory)/NugetPackages

    - task: CopyFiles@2
      displayName: 'Copy dacpac to: $(build.artifactstagingdirectory)'
      inputs:
        Contents: |
          src\**\*.dacpac
        TargetFolder: '$(build.artifactstagingdirectory)/publish'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: dacpac'
      inputs:
        targetPath: $(build.artifactstagingdirectory)/publish
        artifactName: dacpac

    - task: DotNetCoreCLI@2
      displayName: 'Publish - dotnet publish application $(SolutionBaseName).API'
      inputs:
        command: 'publish'
        projects: 'src/$(SolutionBaseName).Api/$(SolutionBaseName).Api.csproj'
        arguments: '-o $(build.artifactstagingdirectory)/publish -c $(BuildConfiguration)'
        publishWebProjects: false #set to false as this setting (which defaults to true) will parse the entire repo for web projects

    - task: DotNetCoreCLI@2
      displayName: 'Publish - dotnet publish application $(SolutionBaseName).Functions.DomainMessageHandlers'
      inputs:
        command: 'publish'
        projects: 'src/$(SolutionBaseName).Functions.DomainMessageHandlers/$(SolutionBaseName).Functions.DomainMessageHandlers.csproj'
        arguments: '-o $(build.artifactstagingdirectory)/publish -c $(BuildConfiguration)'
        publishWebProjects: false #set to false as this setting (which defaults to true) will parse the entire repo for web projects

    - task: DotNetCoreCLI@2
      displayName: 'Publish - dotnet publish application $(SolutionBaseName).Functions.PaymentsProcess'
      inputs:
        command: 'publish'
        projects: 'src/$(SolutionBaseName).Functions.PaymentsProcess/$(SolutionBaseName).Functions.PaymentsProcess.csproj'
        arguments: '-o $(build.artifactstagingdirectory)/publish -c $(BuildConfiguration)'
        publishWebProjects: false #set to false as this setting (which defaults to true) will parse the entire repo for web projects

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)/publish'
      inputs:
        Contents: |
          azure/**
        TargetFolder: '$(build.artifactstagingdirectory)/publish'
        OverWrite: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: NugetPackages'
      inputs:
        targetPath: $(build.artifactstagingdirectory)/NugetPackages
        artifactName: NugetPackages

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: drop'
      inputs:
        targetPath: $(build.artifactstagingdirectory)/publish
        artifactName: drop


- stage: NugetPublish
  displayName: 'Publish Nuget Package'
  pool:
    name: "DAS - Continuous Deployment Agents"
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ${{ parameters.PublishBranchOfNugetPackage }}))
  jobs:
  - job: 'CleanArtifacts'
    displayName: Clean artifacts directory
    workspace:
      clean: all
  - deployment: 'NugetPush'
    dependsOn: 'CleanArtifacts'
    environment: 'Nuget'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: NugetPackages
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/NugetPackages/*.nupkg;!$(Pipeline.Workspace)/NugetPackages/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'SFA NuGet'
